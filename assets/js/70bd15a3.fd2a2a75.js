"use strict";(self.webpackChunkdiscoverse_docs=self.webpackChunkdiscoverse_docs||[]).push([[1030],{937:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"get-started/troubleshooting","title":"Troubleshooting Guide","description":"This guide helps you resolve common issues when installing and using DISCOVERSE. Issues are organized by category for easy navigation.","source":"@site/docs/get-started/troubleshooting.md","sourceDirName":"get-started","slug":"/get-started/troubleshooting","permalink":"/DISCOVERSE-doc/docs/get-started/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/TATP-233/DISCOVERSE/tree/main/discoverse-docs/docs/get-started/troubleshooting.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Usage Guide","permalink":"/DISCOVERSE-doc/docs/get-started/usage"},"next":{"title":"Basic Simulation Overview","permalink":"/DISCOVERSE-doc/docs/tutorials/basic-simulation/overview"}}');var r=s(4848),l=s(8453);const o={sidebar_position:6},t="Troubleshooting Guide",d={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Installation Issues",id:"installation-issues",level:2},{value:"CUDA and PyTorch",id:"cuda-and-pytorch",level:3},{value:"1. CUDA/PyTorch Version Mismatch",id:"1-cudapytorch-version-mismatch",level:4},{value:"2. Missing GLM Headers",id:"2-missing-glm-headers",level:4},{value:"Dependencies",id:"dependencies",level:3},{value:"1. Taichi Installation Failure",id:"1-taichi-installation-failure",level:4},{value:"2. PyQt5 Installation Issues",id:"2-pyqt5-installation-issues",level:4},{value:"Submodules",id:"submodules",level:3},{value:"1. Submodules Not Initialized",id:"1-submodules-not-initialized",level:4},{value:"Runtime Issues",id:"runtime-issues",level:2},{value:"Graphics and Display",id:"graphics-and-display",level:3},{value:"1. GLX Configuration Errors",id:"1-glx-configuration-errors",level:4},{value:"2. EGL Initialization Errors",id:"2-egl-initialization-errors",level:4},{value:"3. MuJoCo-Specific Rendering Issues",id:"3-mujoco-specific-rendering-issues",level:4},{value:"Video Recording",id:"video-recording",level:3},{value:"1. FFmpeg Video Encoding Errors",id:"1-ffmpeg-video-encoding-errors",level:4},{value:"Server Deployment",id:"server-deployment",level:3},{value:"1. Headless Server Setup",id:"1-headless-server-setup",level:4},{value:"Getting Help",id:"getting-help",level:2},{value:"Issue Report Template",id:"issue-report-template",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"troubleshooting-guide",children:"Troubleshooting Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide helps you resolve common issues when installing and using DISCOVERSE. Issues are organized by category for easy navigation."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#installation-issues",children:"Installation Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#cuda-and-pytorch",children:"CUDA and PyTorch"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#dependencies",children:"Dependencies"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#submodules",children:"Submodules"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#runtime-issues",children:"Runtime Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#graphics-and-display",children:"Graphics and Display"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#video-recording",children:"Video Recording"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#server-deployment",children:"Server Deployment"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"installation-issues",children:"Installation Issues"}),"\n",(0,r.jsx)(n.h3,{id:"cuda-and-pytorch",children:"CUDA and PyTorch"}),"\n",(0,r.jsx)(n.h4,{id:"1-cudapytorch-version-mismatch",children:"1. CUDA/PyTorch Version Mismatch"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": ",(0,r.jsx)(n.code,{children:"diff-gaussian-rasterization"})," fails to install with error message about mismatched PyTorch and CUDA versions."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Install matching PyTorch version for your CUDA installation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# For CUDA 11.8\npip install torch==2.2.1 torchvision==0.17.1 --index-url https://download.pytorch.org/whl/cu118\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tip"}),": Check your CUDA version with ",(0,r.jsx)(n.code,{children:"nvcc --version"})," or ",(0,r.jsx)(n.code,{children:"nvidia-smi"})]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-missing-glm-headers",children:"2. Missing GLM Headers"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Compilation error with missing ",(0,r.jsx)(n.code,{children:"glm/glm.hpp"})," header file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"fatal error: glm/glm.hpp: no such file or directory\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Install GLM library and update include path:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Using conda (recommended)\nconda install -c conda-forge glm\nexport CPATH=$CONDA_PREFIX/include:$CPATH\n\n# Then reinstall diff-gaussian-rasterization\npip install submodules/diff-gaussian-rasterization\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsx)(n.h4,{id:"1-taichi-installation-failure",children:"1. Taichi Installation Failure"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Taichi fails to install or import properly."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Install specific Taichi version:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install taichi==1.6.0\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-pyqt5-installation-issues",children:"2. PyQt5 Installation Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": PyQt5 installation fails or GUI components don't work."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Install system packages first:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install python3-pyqt5 python3-pyqt5-dev\n\n# Then install via pip\npip install PyQt5>=5.15.0\n"})}),"\n",(0,r.jsx)(n.h3,{id:"submodules",children:"Submodules"}),"\n",(0,r.jsx)(n.h4,{id:"1-submodules-not-initialized",children:"1. Submodules Not Initialized"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Missing submodule content or import errors from submodules."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Initialize submodules using one of these methods:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Method 1: On-demand initialization (recommended)\npython scripts/setup_submodules.py --list              # Check status\npython scripts/setup_submodules.py --module lidar act  # Initialize specific modules\npython scripts/setup_submodules.py --all               # Initialize all modules\n\n# Method 2: Traditional Git approach\ngit submodule update --init --recursive\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"runtime-issues",children:"Runtime Issues"}),"\n",(0,r.jsx)(n.h3,{id:"graphics-and-display",children:"Graphics and Display"}),"\n",(0,r.jsx)(n.p,{children:"Graphics rendering issues in DISCOVERSE typically fall into three categories, each with different root causes and solutions."}),"\n",(0,r.jsx)(n.h4,{id:"1-glx-configuration-errors",children:"1. GLX Configuration Errors"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": GLFW/OpenGL initialization fails with GLX errors:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GLFWError: (65542) b'GLX: No GLXFBConfigs returned'\nGLFWError: (65545) b'GLX: Failed to find a suitable GLXFBConfig'\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Root Cause"}),": X11/GLX configuration issues, often due to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dual GPU systems (Intel + NVIDIA) with driver conflicts"}),"\n",(0,r.jsx)(n.li,{children:"Missing or misconfigured X11 display server"}),"\n",(0,r.jsx)(n.li,{children:"Incompatible GLX extensions"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For systems with NVIDIA GPU"}),": Check and configure graphics driver mode (dual GPU systems):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check EGL vendor:\neglinfo | grep "EGL vendor"\n\n# If output includes:\nlibEGL warning: egl: failed to create dri2 screen\nIt indicates a conflict between Intel and NVIDIA drivers.\n\n# Check current driver mode\nprime-select query\n\n# If output is `on-demand`, switch to `nvidia` mode, then reboot or relogin!\nsudo prime-select nvidia\n\n# Force NVIDIA usage\nexport __NV_PRIME_RENDER_OFFLOAD=1\nexport __GLX_VENDOR_LIBRARY_NAME=nvidia\n\n# Reboot system after switching\nsudo reboot\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For systems without NVIDIA GPU"})," (conda environments):"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Root Cause"}),": Low version of libstdc++ in conda environment causing GLX compatibility issues."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution 1"})," - Install newer libstdc++ in conda environment:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"conda install -c conda-forge libstdcxx-ng\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution 2"})," - Use system libstdc++ library:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verify GLX support"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'glxinfo | grep "direct rendering"\nglxgears  # Test basic GLX functionality\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For X11 display issues"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Ensure X11 forwarding (if using SSH)\nssh -X username@hostname\n\n# Check DISPLAY variable\necho $DISPLAY\n\n# TODO\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-egl-initialization-errors",children:"2. EGL Initialization Errors"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": EGL backend fails to initialize, especially in virtual/containerized environments:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"libEGL warning: MESA-LOADER: failed to open virtio_gpu: /usr/lib/dri/virtio_gpu_dri.so: cannot open shared object file\nlibEGL warning: MESA-LOADER: failed to open swrast: /usr/lib/dri/swrast_dri.so: cannot open shared object file\nGLFWError: (65542) b'EGL: Failed to initialize EGL: EGL is not or could not be initialized'\nlibGL error: failed to load driver: iris\nlibGL error: failed to load driver: swrast\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Root Cause"}),": Missing or incompatible Mesa drivers, particularly in:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Virtual machines (VirtIO GPU driver issues)"}),"\n",(0,r.jsx)(n.li,{children:"Docker containers without proper GPU passthrough"}),"\n",(0,r.jsx)(n.li,{children:"ARM-based systems with incomplete driver installations"}),"\n",(0,r.jsx)(n.li,{children:"Conda environments with conflicting OpenGL libraries"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Install Mesa drivers"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install mesa-utils libegl1-mesa-dev libgl1-mesa-glx libgles2-mesa-dev\n\n# For virtual environments, also install\nsudo apt-get install mesa-vulkan-drivers mesa-va-drivers\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For conda environment conflicts"})," (similar to GLX issues):"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Root Cause"}),": Conda's OpenGL libraries and libstdc++ versions conflict with system Mesa drivers."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution 1"})," - Fix libstdc++ conflicts (recommended):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Step 1: Install latest gcc in conda environment\nconda install libgcc\n\n# Step 2: Check for duplicate libstdc++ files\nsudo find / -wholename \"*conda*/**/libstdc++.so*\"\n\n# Step 3: Remove conflicting libstdc++ files from conda environment\n# Replace 'your_env_name' with your actual environment name\nrm $CONDA_PREFIX/lib/libstdc++*\n\n# Alternative: Remove specific old versions if you see duplicates\n# rm $CONDA_PREFIX/lib/libstdc++.so.6.0.21  # Example old version\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warning"}),": After removing libstdc++ files, you may occasionally see ",(0,r.jsx)(n.code,{children:"free(): invalid pointer"})," messages when Python programs terminate. This is generally harmless but indicates library conflicts."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution 2"})," - Remove conda's conflicting OpenGL packages:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"conda remove --force mesa-libgl-cos6-x86_64 mesa-libgl-devel-cos6-x86_64\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution 3"})," - Force system OpenGL libraries:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGL.so.1:/usr/lib/x86_64-linux-gnu/libEGL.so.1\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution 4"})," - Install compatible Mesa in conda:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"conda install -c conda-forge mesa-libgl-devel-cos7-x86_64 mesa-dri-drivers-cos7-x86_64\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For VirtIO GPU issues"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install VirtIO GPU drivers\nsudo apt-get install xserver-xorg-video-qxl\n\n# Or fall back to software rendering\nexport LIBGL_ALWAYS_SOFTWARE=1\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure EGL for headless rendering"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export MUJOCO_GL=egl\nexport PYOPENGL_PLATFORM=egl\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"References"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://askubuntu.com/questions/1352158/libgl-error-failed-to-load-drivers-iris-and-swrast-in-ubuntu-20-04",children:"Ask Ubuntu discussion"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/48453497/anaconda-libstdc-so-6-version-glibcxx-3-4-20-not-found",children:"StackOverflow libstdc++ solution"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"3-mujoco-specific-rendering-issues",children:"3. MuJoCo-Specific Rendering Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": MuJoCo environments fail to render properly despite working graphics drivers."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Root Cause"}),": MuJoCo's specific rendering backend requirements and conflicts with system OpenGL configurations."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Set MuJoCo rendering backend"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# For headless servers\nexport MUJOCO_GL=egl\n\n# For desktop environments with display issues\nexport MUJOCO_GL=glfw\n\n# For software rendering (fallback)\nexport MUJOCO_GL=osmesa\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verify MuJoCo installation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python -c \"import mujoco; mujoco.MjModel.from_xml_string('<mujoco/>')\"\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test with simple MuJoCo example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mujoco\nimport mujoco.viewer\n\n# Simple test model\nxml = """\n<mujoco>\n  <worldbody>\n    <geom name="floor" type="plane" size="0 0 .05"/>\n    <body name="box" pos="0 0 .2">\n      <geom name="box" type="box" size=".1 .1 .1"/>\n    </body>\n  </worldbody>\n</mujoco>\n"""\n\nmodel = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\n\n# Test rendering\nwith mujoco.viewer.launch_passive(model, data) as viewer:\n    mujoco.mj_step(model, data)\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reference"}),": Similar issues reported in ",(0,r.jsx)(n.a,{href:"https://github.com/Farama-Foundation/Gymnasium/issues/755#issuecomment-2825928509",children:"Gymnasium Issue #755"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"video-recording",children:"Video Recording"}),"\n",(0,r.jsx)(n.h4,{id:"1-ffmpeg-video-encoding-errors",children:"1. FFmpeg Video Encoding Errors"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Video recording fails during task execution with FFmpeg parameter errors:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"BrokenPipeError: [Errno 32] \u65ad\u5f00\u7684\u7ba1\u9053\n\nRuntimeError: Error writing 'data/coffeecup_place/000/cam_0.mp4': Unrecognized option 'qp'.\nError splitting the argument list: Option not found\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Root Cause"}),": This error occurs when ",(0,r.jsx)(n.code,{children:"mediapy"})," library attempts to write MP4 video files using FFmpeg with incompatible or unrecognized encoding parameters. The issue typically stems from:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Outdated FFmpeg version that doesn't support the 'qp' (quality parameter) option"}),"\n",(0,r.jsx)(n.li,{children:"Conflicting FFmpeg installations (system vs conda)"}),"\n",(0,r.jsx)(n.li,{children:"Missing codec libraries in FFmpeg build"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Update FFmpeg to latest version"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# For conda environments (recommended)\nconda install -c conda-forge ffmpeg\n\n# For system-wide installation (Ubuntu/Debian)\nsudo apt update\nsudo apt install ffmpeg\n\n# Verify installation\nffmpeg -version\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For conda environment conflicts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Remove existing FFmpeg installations\nconda remove ffmpeg\n\n# Install latest FFmpeg with full codec support\nconda install -c conda-forge ffmpeg=6.0\n\n# Verify codecs are available\nffmpeg -codecs | grep h264\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Alternative: Downgrade mediapy to compatible version"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install mediapy==1.1.0\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Workaround: Use different video format"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"If the issue persists, modify the video recording code to use AVI format instead of MP4:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# In airbot_task_base.py or similar files\n# Change from:\n# mediapy.write_video(os.path.join(save_path, f"cam_{id}.mp4"), [...])\n\n# To:\nmediapy.write_video(os.path.join(save_path, f"cam_{id}.avi"), [...], codec=\'mjpeg\')\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For development environments"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install FFmpeg with specific codecs\nsudo apt install ffmpeg libx264-dev libx265-dev\n\n# Or use static FFmpeg build\nwget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz\ntar -xf ffmpeg-release-amd64-static.tar.xz\nsudo cp ffmpeg-*-static/ffmpeg /usr/local/bin/\nsudo cp ffmpeg-*-static/ffprobe /usr/local/bin/\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reference"}),": Similar issue reported in ",(0,r.jsx)(n.a,{href:"https://github.com/nerfstudio-project/nerfstudio/issues/1138",children:"nerfstudio #1138"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"server-deployment",children:"Server Deployment"}),"\n",(0,r.jsx)(n.h4,{id:"1-headless-server-setup",children:"1. Headless Server Setup"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Running DISCOVERSE on a server without display."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Configure MuJoCo for headless rendering:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export MUJOCO_GL=egl\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add this to your shell profile (",(0,r.jsx)(n.code,{children:".bashrc"}),", ",(0,r.jsx)(n.code,{children:".zshrc"}),") for permanent effect:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "export MUJOCO_GL=egl" >> ~/.bashrc\nsource ~/.bashrc\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsx)(n.p,{children:"If your issue isn't covered here:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Search GitHub Issues"}),": Check ",(0,r.jsx)(n.a,{href:"https://github.com/TATP-233/DISCOVERSE/issues",children:"existing issues"})," for similar problems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create New Issue"}),": Provide detailed error messages and system information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Community Support"}),": Join our WeChat community for real-time help"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Check the ",(0,r.jsx)(n.code,{children:"/doc"})," directory for detailed guides"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"issue-report-template",children:"Issue Report Template"}),"\n",(0,r.jsx)(n.p,{children:"When reporting issues, please include:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"**System Information:**\n- OS: (e.g., Ubuntu 22.04)\n- Python version: \n- CUDA version: \n- GPU model: \n\n**Error Message:**\n[Paste complete error trace here]\n\n**Steps to Reproduce:**\n1. \n2. \n3. \n\n**Expected Behavior:**\n[What should happen]\n\n**Additional Context:**\n[Any other relevant information]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This troubleshooting guide is actively maintained. If you find a solution to a problem not listed here, please consider contributing to help other users."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(6540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);