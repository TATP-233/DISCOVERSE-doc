"use strict";(self.webpackChunkdiscoverse_docs=self.webpackChunkdiscoverse_docs||[]).push([[2600],{6412:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorials/imitation-learning/act","title":"ACT (Action Chunking with Transformers)","description":"ACT (Action Chunking with Transformers) is an imitation learning algorithm based on the Transformer architecture.","source":"@site/docs/tutorials/imitation-learning/act.md","sourceDirName":"tutorials/imitation-learning","slug":"/tutorials/imitation-learning/act","permalink":"/DISCOVERSE-doc/docs/tutorials/imitation-learning/act","draft":false,"unlisted":false,"editUrl":"https://github.com/TATP-233/DISCOVERSE/tree/main/discoverse-docs/docs/tutorials/imitation-learning/act.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Data Generation","permalink":"/DISCOVERSE-doc/docs/tutorials/imitation-learning/data-generation"},"next":{"title":"Diffusion Policy","permalink":"/DISCOVERSE-doc/docs/tutorials/imitation-learning/dp"}}');var a=i(4848),r=i(8453);const o={sidebar_position:3},s="ACT (Action Chunking with Transformers)",c={},d=[{value:"\ud83d\udcca Data Format Conversion",id:"-data-format-conversion",level:2},{value:"Dependency Installation",id:"dependency-installation",level:3},{value:"Conversion Command",id:"conversion-command",level:3},{value:"\ud83c\udf93 Model Training",id:"-model-training",level:2},{value:"Training Configuration",id:"training-configuration",level:3}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"act-action-chunking-with-transformers",children:"ACT (Action Chunking with Transformers)"})}),"\n",(0,a.jsx)(e.p,{children:"ACT (Action Chunking with Transformers) is an imitation learning algorithm based on the Transformer architecture."}),"\n",(0,a.jsx)(e.h2,{id:"-data-format-conversion",children:"\ud83d\udcca Data Format Conversion"}),"\n",(0,a.jsx)(e.h3,{id:"dependency-installation",children:"Dependency Installation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip install -r policies/act/requirements/train_eval.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\n"})}),"\n",(0,a.jsx)(e.h3,{id:"conversion-command",children:"Conversion Command"}),"\n",(0,a.jsx)(e.p,{children:"Convert raw simulation data to the HDF5 format required by the ACT algorithm:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"python3 policies/act/data_process/raw_to_hdf5.py -md mujoco -dir data -tn <task_name> -vn <video_names>\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"-md"}),": Conversion mode, mujoco means converting data collected by the discoverse simulator"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"-dir"}),": Root directory for data storage, default is data"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"-tn"}),": Task name, the program will look for a dataset folder with the same name in the data directory"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"-vn"}),": Video name, specify the video file names to convert (without extension), separate multiple names with spaces"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["The converted data will be stored in the ",(0,a.jsx)(e.code,{children:"discoverse/data/hdf5"})," folder."]}),"\n",(0,a.jsx)(e.h2,{id:"-model-training",children:"\ud83c\udf93 Model Training"}),"\n",(0,a.jsx)(e.h3,{id:"training-configuration",children:"Training Configuration"}),"\n",(0,a.jsxs)(e.p,{children:["The reference training configuration file is located at ",(0,a.jsx)(e.code,{children:"policies/act/configurations/task_configs/example_task.py"}),", with the main parameters explained as follows:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"camera_names"}),": Camera indices in the training data"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"state_dim"}),": Dimension of the observation vector in the training data"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"action_dim"}),": Dimension of the action vector in the training data"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"batch_size_train"}),": Batch size during training"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>s});var t=i(6540);const a={},r=t.createContext(a);function o(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);